{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"E:\\\\6 6\\\\React-redux-shopping-web-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"E:\\\\6 6\\\\React-redux-shopping-web-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"E:\\\\6 6\\\\React-redux-shopping-web-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"E:\\\\6 6\\\\React-redux-shopping-web-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"E:\\\\6 6\\\\React-redux-shopping-web-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar _require = require('./HttpClient'),\n    HttpClient = _require.HttpClient,\n    HttpClientResponse = _require.HttpClientResponse;\n\nvar defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nvar defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n});\n/**\n * HTTP client which uses the Node `http` and `https` packages to issue\n * requests.`\n */\n\nvar NodeHttpClient = /*#__PURE__*/function (_HttpClient) {\n  _inherits(NodeHttpClient, _HttpClient);\n\n  function NodeHttpClient(agent) {\n    var _this;\n\n    _classCallCheck(this, NodeHttpClient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeHttpClient).call(this));\n    _this._agent = agent;\n    return _this;\n  }\n  /** @override. */\n\n\n  _createClass(NodeHttpClient, [{\n    key: \"getClientName\",\n    value: function getClientName() {\n      return 'node';\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n      var isInsecureConnection = protocol === 'http';\n      var agent = this._agent;\n\n      if (!agent) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var requestPromise = new Promise(function (resolve, reject) {\n        var req = (isInsecureConnection ? http : https).request({\n          host: host,\n          port: port,\n          path: path,\n          method: method,\n          agent: agent,\n          headers: headers,\n          ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n        });\n        req.setTimeout(timeout, function () {\n          req.destroy(HttpClient.makeTimeoutError());\n        });\n        req.on('response', function (res) {\n          resolve(new NodeHttpClientResponse(res));\n        });\n        req.on('error', function (error) {\n          reject(error);\n        });\n        req.once('socket', function (socket) {\n          if (socket.connecting) {\n            socket.once(isInsecureConnection ? 'connect' : 'secureConnect', function () {\n              // Send payload; we're safe:\n              req.write(requestData);\n              req.end();\n            });\n          } else {\n            // we're already connected\n            req.write(requestData);\n            req.end();\n          }\n        });\n      });\n      return requestPromise;\n    }\n  }]);\n\n  return NodeHttpClient;\n}(HttpClient);\n\nvar NodeHttpClientResponse = /*#__PURE__*/function (_HttpClientResponse) {\n  _inherits(NodeHttpClientResponse, _HttpClientResponse);\n\n  function NodeHttpClientResponse(res) {\n    var _this2;\n\n    _classCallCheck(this, NodeHttpClientResponse);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(NodeHttpClientResponse).call(this, res.statusCode, res.headers || {}));\n    _this2._res = res;\n    return _this2;\n  }\n\n  _createClass(NodeHttpClientResponse, [{\n    key: \"getRawResponse\",\n    value: function getRawResponse() {\n      return this._res;\n    }\n  }, {\n    key: \"toStream\",\n    value: function toStream(streamCompleteCallback) {\n      // The raw response is itself the stream, so we just return that. To be\n      // backwards compatible, we should invoke the streamCompleteCallback only\n      // once the stream has been fully consumed.\n      this._res.once('end', function () {\n        return streamCompleteCallback();\n      });\n\n      return this._res;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        var response = '';\n\n        _this3._res.setEncoding('utf8');\n\n        _this3._res.on('data', function (chunk) {\n          response += chunk;\n        });\n\n        _this3._res.once('end', function () {\n          try {\n            resolve(JSON.parse(response));\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n  }]);\n\n  return NodeHttpClientResponse;\n}(HttpClientResponse);\n\nmodule.exports = {\n  NodeHttpClient: NodeHttpClient,\n  NodeHttpClientResponse: NodeHttpClientResponse\n};","map":null,"metadata":{},"sourceType":"script"}